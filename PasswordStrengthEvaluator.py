"""
Password Strength Analysis Script
Author: Rodrigo Flores
Reference:
    Password scoring inspired by heuristics commonly found in tools such as
    UIC Strong Password Test and custom adaptations based on character diversity,
    length, and penalties for low entropy structures.
Description:
    This script analyzes the strength of passwords generated by different
    password managers. It filters passwords by length (12 or 16 characters),
    calculates a strength score, and generates an Excel report with statistics
    and visualizations.
"""

import pandas as pd
import matplotlib.pyplot as plt
from openpyxl.drawing.image import Image
import os
import subprocess
import platform

# ---------- Utility Functions ----------
def calculate_password_score(password):
    """
    Calculates a strength score for a given password based on:
    - Length
    - Presence of uppercase, lowercase, digits, and symbols
    - Penalty for using only one type of character
    Returns a raw numerical score.
    """
    if not isinstance(password, str):
        return 0
    score = 0
    length = len(password)
    uppercase = sum(1 for c in password if c.isupper())
    lowercase = sum(1 for c in password if c.islower())
    numbers   = sum(1 for c in password if c.isdigit())
    symbols   = sum(1 for c in password if not c.isalnum())
    char_var  = sum([uppercase > 0, lowercase > 0, numbers > 0, symbols > 0])
    score += length * 4 + char_var * 10
    if uppercase: score += (length - uppercase) * 2
    if lowercase: score += (length - lowercase) * 2
    score += numbers * 4 + symbols * 6
    if char_var == 1: score -= length * 2
    return max(0, score)

def open_file(filepath):
    """Opens a file using the default application based on the operating system."""
    if platform.system() == "Windows":
        os.startfile(filepath)
    elif platform.system() == "Darwin":
        subprocess.call(["open", filepath])
    else:
        subprocess.call(["xdg-open", filepath])

# ---------- Main Analysis Function ----------
def analyze_passwords():
    input_path  = r"Z:\TEMP\senhas.xlsx"
    output_dir  = r"Z:\TEMP"
    os.makedirs(output_dir, exist_ok=True)

    # 1. Load Excel file with passwords
    try:
        df = pd.read_excel(input_path)
    except Exception as e:
        print(f"Error reading file: {e}")
        return

    # 2. Filter passwords by length (only 12 or 16 characters)
    df_filtered = pd.DataFrame()
    for col in df.columns:
        valid_passwords = df[col].dropna().astype(str)
        valid_passwords = valid_passwords[valid_passwords.str.len().isin([12, 16])]
        df_filtered[col] = pd.Series(valid_passwords.values)

    # 3. Calculate password scores
    rows = []
    for mgr in df_filtered.columns:
        for pwd in df_filtered[mgr].dropna():
            score = calculate_password_score(pwd)
            rows.append({
                "Password Manager": mgr,
                "Password": pwd,
                "Raw Score": score,
                "Length": len(pwd)
            })

    result_df = pd.DataFrame(rows)
    if result_df.empty:
        print("No valid passwords of length 12 or 16 found.")
        return

    # Normalize scores from 1 to 10
    max_score = result_df["Raw Score"].max()
    result_df["Score"] = result_df["Raw Score"] / max_score * 9 + 1

    mean_scores = result_df.groupby("Password Manager")["Score"].mean().sort_values()
    std_scores  = result_df.groupby("Password Manager")["Score"].std()
    best_mgr = mean_scores.idxmax()
    most_consistent = std_scores.idxmin()

    xlsx_path   = os.path.join(output_dir, "Password_Analysis_Results.xlsx")
    bar_png     = os.path.join(output_dir, "BarChart_Score.png")
    line_png    = os.path.join(output_dir, "LineChart_Variation.png")

    # 4. Create charts
    plt.figure(figsize=(8,6))
    mean_scores.plot(kind="barh", color="skyblue", edgecolor="black")
    plt.xlabel("Score")
    plt.title("Average Score by Password Manager")
    plt.tight_layout()
    plt.savefig(bar_png, dpi=300)
    plt.close()

    plt.figure(figsize=(10,6))
    for mgr in df_filtered.columns:
        y = result_df[result_df["Password Manager"] == mgr]["Score"].reset_index(drop=True)
        plt.plot(y, marker="o", linewidth=1.5, label=mgr)
    plt.ylim(1,10)
    plt.xlabel("Password Index")
    plt.ylabel("Score")
    plt.title("Score Variation by Password Manager")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.savefig(line_png, dpi=300)
    plt.close()

    # 5. Export to Excel with charts and summary
    with pd.ExcelWriter(xlsx_path, engine="openpyxl") as writer:
        result_df.to_excel(writer, sheet_name="Detailed Scores", index=False)

        summary = result_df.groupby("Password Manager").agg(
            Average_Score = ("Score", "mean"),
            Std_Deviation = ("Score", "std"),
            Password_Count = ("Score", "count")
        ).reset_index()
        summary.to_excel(writer, sheet_name="Summary Scores", index=False)

        wb = writer.book
        chart_ws = wb.create_sheet("Charts")
        chart_ws.add_image(Image(bar_png),  "A1")
        chart_ws.add_image(Image(line_png), "A30")

        notes_ws = wb.create_sheet("Conclusions")
        notes_ws["A1"] = "ANALYSIS CONCLUSIONS"
        notes_ws["A3"] = f"Top Password Manager: {best_mgr}"
        notes_ws["A5"] = "Key Observations:"
        notes_ws["A6"] = f"- {best_mgr} achieved the highest average score ({mean_scores.max():.2f})"
        notes_ws["A7"] = "- Significant score variation among managers"
        notes_ws["A8"] = "- Normalization helps compare generators on a unified scale"
        notes_ws["A9"] = f"- Most consistent manager: {most_consistent} (Ïƒ={std_scores.min():.2f})"

    print("Excel report created at:", xlsx_path)
    open_file(xlsx_path)

if __name__ == "__main__":
    analyze_passwords()
